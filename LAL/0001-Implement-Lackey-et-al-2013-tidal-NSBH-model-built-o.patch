From 9d77d7b08cc9c0cd3c9e4bec6802d83f799e53a9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20P=C3=BCrrer?= <Michael.Puerrer@ligo.org>
Date: Tue, 9 Feb 2016 21:50:07 +0100
Subject: [PATCH] Implement Lackey et al 2013 tidal NSBH model built on
 SEOBNRv2_ROM_HI

---
 lalsimulation/src/LALSimIMR.h                      |   9 +-
 lalsimulation/src/LALSimIMRLackeyTidal2013.c       | 385 +++++++++++++++++++++
 lalsimulation/src/LALSimIMRLackeyTidal2013.h       |  67 ++++
 .../src/LALSimIMRSEOBNRv2ROMDoubleSpinHI.c         |  20 +-
 lalsimulation/src/LALSimInspiral.c                 |  14 +
 lalsimulation/src/LALSimInspiral.h                 |   2 +
 lalsimulation/src/LALSimInspiralWaveformCache.c    |  11 +
 lalsimulation/src/Makefile.am                      |   2 +
 8 files changed, 498 insertions(+), 12 deletions(-)
 create mode 100644 lalsimulation/src/LALSimIMRLackeyTidal2013.c
 create mode 100644 lalsimulation/src/LALSimIMRLackeyTidal2013.h

diff --git a/lalsimulation/src/LALSimIMR.h b/lalsimulation/src/LALSimIMR.h
index cca623d..c8b8449 100644
--- a/lalsimulation/src/LALSimIMR.h
+++ b/lalsimulation/src/LALSimIMR.h
@@ -184,8 +184,8 @@ int XLALSimIMRSEOBNRv2ROMDoubleSpinFrequencyOfTime(REAL8 *frequency, REAL8 t, RE
 
 /* in module LALSimIMRSEOBNRv2ROMDoubleSpinHI.c */
 
-int XLALSimIMRSEOBNRv2ROMDoubleSpinHI(struct tagCOMPLEX16FrequencySeries **hptilde, struct tagCOMPLEX16FrequencySeries **hctilde, REAL8 phiRef, REAL8 deltaF, REAL8 fLow, REAL8 fHigh, REAL8 fRef, REAL8 distance, REAL8 inclination, REAL8 m1SI, REAL8 m2SI, REAL8 chi1, REAL8 chi2, UINT4 nk_max);
-int XLALSimIMRSEOBNRv2ROMDoubleSpinHIFrequencySequence(struct tagCOMPLEX16FrequencySeries **hptilde, struct tagCOMPLEX16FrequencySeries **hctilde, const REAL8Sequence *freqs, REAL8 phiRef, REAL8 fRef, REAL8 distance, REAL8 inclination, REAL8 m1SI, REAL8 m2SI, REAL8 chi1, REAL8 chi2, UINT4 nk_max);
+int XLALSimIMRSEOBNRv2ROMDoubleSpinHI(struct tagCOMPLEX16FrequencySeries **hptilde, struct tagCOMPLEX16FrequencySeries **hctilde, REAL8 phiRef, REAL8 deltaF, REAL8 fLow, REAL8 fHigh, REAL8 fRef, REAL8 distance, REAL8 inclination, REAL8 m1SI, REAL8 m2SI, REAL8 chi1, REAL8 chi2, INT4 nk_max);
+int XLALSimIMRSEOBNRv2ROMDoubleSpinHIFrequencySequence(struct tagCOMPLEX16FrequencySeries **hptilde, struct tagCOMPLEX16FrequencySeries **hctilde, const REAL8Sequence *freqs, REAL8 phiRef, REAL8 fRef, REAL8 distance, REAL8 inclination, REAL8 m1SI, REAL8 m2SI, REAL8 chi1, REAL8 chi2, INT4 nk_max);
 int XLALSimIMRSEOBNRv2ROMDoubleSpinHITimeOfFrequency(REAL8 *t, REAL8 frequency, REAL8 m1SI, REAL8 m2SI, REAL8 chi1, REAL8 chi2);
 int XLALSimIMRSEOBNRv2ROMDoubleSpinHIFrequencyOfTime(REAL8 *frequency, REAL8 t, REAL8 m1SI, REAL8 m2SI, REAL8 chi1, REAL8 chi2);
 
@@ -195,6 +195,11 @@ int XLALSimIMRSEOBNRv2ROMDoubleSpinHIFrequencyOfTime(REAL8 *frequency, REAL8 t,
 REAL8 XLALSimIMRSEOBNRv2ChirpTimeSingleSpin(const REAL8 m1_SI, const REAL8 m2_SI, const REAL8 chi, const REAL8 f_min);
 
 
+/* in module LALSimIMRLackeyTidal2013.c */
+int XLALSimIMRLackeyTidal2013(struct tagCOMPLEX16FrequencySeries **hptilde, struct tagCOMPLEX16FrequencySeries **hctilde, REAL8 phiRef, REAL8 deltaF, REAL8 fLow, REAL8 fHigh, REAL8 fRef, REAL8 distance, REAL8 inclination, REAL8 mBH_SI, REAL8 mNS_SI, REAL8 chi_BH, REAL8 Lambda);
+int XLALSimIMRLackeyTidal2013FrequencySequence(struct tagCOMPLEX16FrequencySeries **hptilde, struct tagCOMPLEX16FrequencySeries **hctilde, const REAL8Sequence *freqs, REAL8 phiRef, REAL8 fRef, REAL8 distance, REAL8 inclination, REAL8 mBH_SI, REAL8 mNS_SI, REAL8 chi_BH, REAL8 Lambda);
+
+
 /* in module LALSimIMRPSpinInspiralRD.c */
 
 int XLALSimIMRPhenSpinFinalMassSpin(REAL8 *finalMass, REAL8 *finalSpin, REAL8 m1, REAL8 m2, REAL8 s1s1, REAL8 s2s2, REAL8 s1L, REAL8 s2L, REAL8 s1s2, REAL8 energy);
diff --git a/lalsimulation/src/LALSimIMRLackeyTidal2013.c b/lalsimulation/src/LALSimIMRLackeyTidal2013.c
new file mode 100644
index 0000000..c5808ab
--- /dev/null
+++ b/lalsimulation/src/LALSimIMRLackeyTidal2013.c
@@ -0,0 +1,385 @@
+/*
+ *  Copyright (C) 2016 Michael Puerrer, Prayush Kumar
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with with program; see the file COPYING. If not, write to the
+ *  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *  MA  02111-1307  USA
+ */
+
+#ifdef __GNUC__
+#define UNUSED __attribute__ ((unused))
+#else
+#define UNUSED
+#endif
+
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <math.h>
+#include <complex.h>
+
+#include <lal/Units.h>
+#include <lal/SeqFactories.h>
+#include <lal/LALConstants.h>
+#include <lal/XLALError.h>
+#include <lal/FrequencySeries.h>
+#include <lal/Sequence.h>
+#include <lal/LALSimIMR.h>
+
+#include "LALSimIMRLackeyTidal2013.h"
+
+
+/*************** Model coefficients ******************/
+
+// Amplitude correction factors for SEOBNRv2
+// Define constants as per Eq 33 of Lackey et al, arXiv:1303.6298.
+const double b0 = -1424.2;
+const double b1 = 6423.4;
+const double b2 = 0.84203;
+const double c0 = -9.7628;
+const double c1 = 33.939;
+const double c2 = 1.0971;
+// Phase correction factors
+const double g0 = -4.6339;
+const double g1 = 27.719;
+const double g2 = 10.268;
+const double g3 = -41.741;
+
+
+/********************* Definitions begin here ********************/
+
+static void tidalPNAmplitudeCoefficient(
+  double *C,
+  const double eta,
+  const double chi_BH,
+  const double Lambda
+) {
+  // Coefficient in the amplitude factor, Eq 33 of Lackey et al
+  *C = exp(b0 + b1*eta + b2*chi_BH)
+     + Lambda * exp(c0 + c1*eta + c2*chi_BH);
+}
+
+static double tidalCorrectionAmplitude(
+  const double mf,
+  const double C,
+  const double eta,
+  const double Lambda
+) {
+  const double mfA = 0.01; // amplitude transition frequency
+  if (mf <= mfA)
+    return 1.0;
+  else {
+    // Generate the amplitude factor, Eq 33 of Lackey et al
+    double dmf = mf - mfA;
+    double dmf2 = dmf*dmf;
+    double B = C * dmf*dmf2;
+    return exp(-eta * Lambda * B);
+  }
+}
+
+// precompute a0, a1 and G which do not depend on frequency
+static void tidalPNPhaseCoefficients(
+  double *a0,
+  double *a1,
+  double *G,
+  const double eta,
+  const double chi_BH,
+  const double Lambda
+) {
+  // First compute the PN inspiral phasing correction
+  // see Eq. 7,8 of Lackey et al
+  double eta2 = eta*eta;
+  double eta3 = eta2*eta;
+  double SqrtOneMinus4Eta = sqrt(1.-4.*eta);
+
+  *a0 = -12 * Lambda * ((1 + 7.*eta - 31*eta2)
+      - SqrtOneMinus4Eta * (1 + 9.*eta - 11*eta2));
+  *a1 = -(585.*Lambda/28.)
+      * ((1. + 3775.*eta/234. - 389.*eta2/6. + 1376.*eta3/117.)
+      - SqrtOneMinus4Eta*(1 + 4243.*eta/234. - 6217*eta2/234. - 10.*eta3/9.));
+
+  *G = exp(g0 + g1*eta + g2*chi_BH + g3*eta*chi_BH); // Eq 35 of Lackey et al
+}
+
+static double tidalPNPhase(
+  const double mf,
+  const double a0,
+  const double a1,
+  const double eta
+) {
+  // First compute the PN inspiral phasing correction
+  // see Eq. 7,8 of Lackey et al
+  double v = cbrt(LAL_PI * mf);
+  double v2 = v*v;
+  double v5 = v2*v2*v;
+  double v7 = v5*v2;
+  return 3.*(a0*v5 + a1*v7) / (128.*eta);
+}
+
+static double tidalPNPhaseDeriv(
+  const double mf,
+  const double a0,
+  const double a1,
+  const double eta
+) {
+  // First compute the PN inspiral phasing correction
+  // see Eq. 7,8 of Lackey et al
+  double v = cbrt(LAL_PI * mf);
+  double v2 = v*v;
+  double v4 = v2*v2;
+  return LAL_PI * (5.*a0*v2 + 7.*a1*v4) / (128.*eta);
+}
+
+// Implements Eq. 34 of Lackey et al
+static double tidalCorrectionPhase(
+  const double mf,
+  const double a0,
+  const double a1,
+  const double G,
+  const double eta,
+  const double Lambda
+)
+{
+  const double mfP = 0.02; // phase transition frequency
+
+  if (mf <= mfP)
+    return tidalPNPhase(mf, a0, a1, eta);
+
+  // Beyond the phase transition frequency we evaluate the tidal phase
+  // and its derivative at the transition frequency
+  double psiT = tidalPNPhase(mf, a0, a1, eta);
+  double DpsiT= (mf - mfP) * tidalPNPhaseDeriv(mf, a0, a1, eta);
+  // Now compute the phenomenological term
+  double E = G * pow(mf - mfP, 5./3.); // Eq 35 of Lackey et al
+  double psiFit = eta * Lambda * E;
+  return psiT + DpsiT - psiFit; // Eq 34 of Lackey et al
+}
+
+int LackeyTidal2013SEOBNRv2ROMCore(
+  struct tagCOMPLEX16FrequencySeries **hptilde, /**< Output: Frequency-domain waveform h+ */
+  struct tagCOMPLEX16FrequencySeries **hctilde, /**< Output: Frequency-domain waveform hx */
+  REAL8 phiRef,                                 /**< Phase at reference time */
+  REAL8 fRef,                                   /**< Reference frequency (Hz); 0 defaults to fLow */
+  REAL8 distance,                               /**< Distance of source (m) */
+  REAL8 inclination,                            /**< Inclination of source (rad) */
+  REAL8 mBH_SI,                                 /**< Mass of black hole (kg) */
+  REAL8 mNS_SI,                                 /**< Mass of neutron star (kg) */
+  REAL8 chi_BH,                                 /**< Dimensionless aligned component spin of the BH */
+  REAL8 Lambda,                                 /**< Dimensionless tidal deformability (Eq 1  of Lackey et al) */
+  const REAL8Sequence *freqs_in,                /**< Frequency points at which to evaluate the waveform (Hz) */
+  REAL8 deltaF                                  /**< Sampling frequency (Hz) */
+)
+{
+  /* Check output arrays */
+  if(!hptilde || !hctilde)
+    XLAL_ERROR(XLAL_EFAULT);
+  if(*hptilde || *hctilde) {
+    XLALPrintError("(*hptilde) and (*hctilde) are supposed to be NULL, but got %p and %p",(*hptilde),(*hctilde));
+    XLAL_ERROR(XLAL_EFAULT);
+  }
+
+  if (!freqs_in) XLAL_ERROR(XLAL_EFAULT);
+  double fLow  = freqs_in->data[0];
+  double fHigh = freqs_in->data[freqs_in->length - 1];
+  if(fRef == 0.0)
+    fRef = fLow;
+
+  double mBH = mBH_SI / LAL_MSUN_SI;
+  double mNS = mNS_SI / LAL_MSUN_SI;
+  double M = mBH + mNS;
+  double eta = mBH * mNS / (M*M);    /* Symmetric mass-ratio */
+  double Mtot_sec = M * LAL_MTSUN_SI; /* Total mass in seconds */
+  double chi_NS = 0; // NS has zero spin
+
+  // Impose sanity checks and cutoffs on mass-ratio, and BH spins
+  if (mBH < mNS) XLAL_ERROR(XLAL_EDOM, "mBH = %g < mNS = %g ! ", mBH, mNS);
+  if (eta < 6./49.) XLAL_ERROR(XLAL_EDOM, "eta = %g < 6/49!", eta);
+  if (chi_BH > 0.75) XLAL_ERROR(XLAL_EDOM, "BH spin = %g > 0.75!", chi_BH);
+  if (chi_BH < -0.75) XLAL_ERROR(XLAL_EDOM, "BH spin = %g < -0.75!", chi_BH);
+
+  // Call the high-resolution SEOBNRv2 ROM that can go to very low total mass
+  // We call either the FrequencySequence version or the regular LAL version depending on how we've been called.
+  int ret = XLAL_SUCCESS;
+  if (deltaF > 0)
+    ret = XLALSimIMRSEOBNRv2ROMDoubleSpinHI(
+      hptilde, hctilde,
+      phiRef, deltaF, fLow, fHigh, fRef, distance, inclination,
+      mBH_SI, mNS_SI,
+      chi_BH, chi_NS,
+      -1);
+  else
+    ret = XLALSimIMRSEOBNRv2ROMDoubleSpinHIFrequencySequence(
+      hptilde, hctilde,
+      freqs_in,
+      phiRef, fRef, distance, inclination,
+      mBH_SI, mNS_SI,
+      chi_BH, chi_NS,
+      -1);
+  XLAL_CHECK(XLAL_SUCCESS == ret, ret, "XLALSimIMRSEOBNRv2ROMDoubleSpinHI() failed.");
+
+  UINT4 offset;
+  REAL8Sequence *freqs = NULL;
+  if (deltaF > 0) { // uniform frequencies
+    // Recreate freqs using only the lower and upper bounds
+    UINT4 iStart = (UINT4) ceil(fLow / deltaF);
+    UINT4 iStop = (*hptilde)->data->length - 1; // use the length calculated in the ROM function
+    freqs = XLALCreateREAL8Sequence(iStop - iStart);
+    if (!freqs) XLAL_ERROR(XLAL_EFUNC, "Frequency array allocation failed.");
+    double deltaF_geom = deltaF * Mtot_sec;
+    for (UINT4 i=iStart; i<iStop; i++)
+      freqs->data[i-iStart] = i*deltaF_geom;
+
+    offset = iStart;
+  }
+  else { // unequally spaced frequency sequence
+    freqs = XLALCreateREAL8Sequence(freqs_in->length);
+    if (!freqs) XLAL_ERROR(XLAL_EFUNC, "Frequency array allocation failed.");
+    for (UINT4 i=0; i<freqs_in->length; i++)
+      freqs->data[i] = freqs_in->data[i] * Mtot_sec; // just copy input and convert to geometric frequency
+    offset = 0;
+  }
+  COMPLEX16 *pdata=(*hptilde)->data->data;
+  COMPLEX16 *cdata=(*hctilde)->data->data;
+
+  // Precompute coefficients that do not depend on frequency
+  double C, a0, a1, G;
+  tidalPNAmplitudeCoefficient(&C, eta, chi_BH, Lambda);
+  tidalPNPhaseCoefficients(&a0, &a1, &G, eta, chi_BH, Lambda);
+
+  // Assemble waveform from aplitude and phase
+  for (size_t i=0; i<freqs->length; i++) { // loop over frequency points in sequence
+    double Mf = freqs->data[i];
+    int j = i + offset; // shift index for frequency series if needed
+    // Tidal corrections to be incorporated
+    double ampC = tidalCorrectionAmplitude(Mf, C, eta, Lambda);
+    double phsC = tidalCorrectionPhase(Mf, a0, a1, G, eta, Lambda);
+    COMPLEX16 Corr = ampC * cexp(-I*phsC);
+    pdata[j] *= Corr;
+    cdata[j] *= Corr;
+  }
+
+  XLALDestroyREAL8Sequence(freqs);
+
+  return XLAL_SUCCESS;
+}
+
+/**
+ * @addtogroup LALSimIMRTIDAL_c
+ *
+ * @{
+ *
+ * @name Lackey et al (2013) tidal model based on SEOBNRv2_ROM
+ *
+ * @author Michael Puerrer, Prayush Kumar
+ *
+ * @brief C code for Lackey et al arXiv:1303.6298 tidal model.
+ *
+ * This is a frequency domain model that adds tidal modifications of amplitude and phasing
+ * to the SEOBNRv2 model. Instead of SEOBNRv2, we use the high resolution ROM.
+ *
+ * @note Parameter ranges:
+ *   * 6/49 <= eta <= 0.25
+ *   * -0.75 <= chi_BH <= 0.75
+ *   * Mtot >= 2 Msun @ 10 Hz (inherited from the ROM)
+ *
+ *  Aligned component spin on black hole chi_BH. The NS is assumed to be non-spinning.
+ *  Symmetric mass-ratio eta = m1*m2/(m1+m2)^2.
+ *  Total mass Mtot.
+ *
+ * @{
+ */
+
+
+/**
+ * Compute waveform in LAL format at specified frequencies for the Lackey et al (2013)
+ * tidal model based on SEOBNRv2_ROM_DoubleSpin_HI.
+ *
+ * XLALSimIMRLackeyTidal2013() returns the plus and cross polarizations as a complex
+ * frequency series with equal spacing deltaF and contains zeros from zero frequency
+ * to the starting frequency and zeros beyond the cutoff frequency in the ringdown.
+ *
+ * In contrast, XLALSimIMRLackeyTidal2013FrequencySequence() returns a
+ * complex frequency series with entries exactly at the frequencies specified in
+ * the sequence freqs (which can be unequally spaced). No zeros are added.
+ *
+ * If XLALSimIMRLackeyTidal2013FrequencySequence() is called with frequencies that
+ * are beyond the maxium allowed geometric frequency for the ROM, zero strain is returned.
+ * It is not assumed that the frequency sequence is ordered.
+ *
+ * This function is designed as an entry point for reduced order quadratures.
+ */
+int XLALSimIMRLackeyTidal2013FrequencySequence(
+  struct tagCOMPLEX16FrequencySeries **hptilde, /**< Output: Frequency-domain waveform h+ */
+  struct tagCOMPLEX16FrequencySeries **hctilde, /**< Output: Frequency-domain waveform hx */
+  const REAL8Sequence *freqs,                   /**< Frequency points at which to evaluate the waveform (Hz) */
+  REAL8 phiRef,                                 /**< Phase at reference time */
+  REAL8 fRef,                                   /**< Reference frequency (Hz); 0 defaults to fLow */
+  REAL8 distance,                               /**< Distance of source (m) */
+  REAL8 inclination,                            /**< Inclination of source (rad) */
+  REAL8 mBH_SI,                                 /**< Mass of black hole (kg) */
+  REAL8 mNS_SI,                                 /**< Mass of neutron star (kg) */
+  REAL8 chi_BH,                                 /**< Dimensionless aligned component spin of the BH */
+  REAL8 Lambda)                                 /**< Dimensionless tidal deformability (Eq 1  of Lackey et al) */
+{
+  if (!freqs) XLAL_ERROR(XLAL_EFAULT);
+
+  // Call the internal core function with deltaF = 0 to indicate that freqs is non-uniformly
+  // spaced and we want the strain only at these frequencies
+  int retcode = LackeyTidal2013SEOBNRv2ROMCore(hptilde, hctilde,
+            phiRef, fRef, distance, inclination, mBH_SI, mNS_SI, chi_BH, Lambda, freqs, 0);
+
+  return(retcode);
+}
+
+/**
+ * Compute waveform in LAL format for the Lackey et al (2013) tidal model based on
+ * SEOBNRv2_ROM_DoubleSpin_HI.
+ *
+ * Returns the plus and cross polarizations as a complex frequency series with
+ * equal spacing deltaF and contains zeros from zero frequency to the starting
+ * frequency fLow and zeros beyond the cutoff frequency in the ringdown.
+ */
+int XLALSimIMRLackeyTidal2013(
+  struct tagCOMPLEX16FrequencySeries **hptilde, /**< Output: Frequency-domain waveform h+ */
+  struct tagCOMPLEX16FrequencySeries **hctilde, /**< Output: Frequency-domain waveform hx */
+  REAL8 phiRef,                                 /**< Phase at reference time */
+  REAL8 deltaF,                                 /**< Sampling frequency (Hz) */
+  REAL8 fLow,                                   /**< Starting GW frequency (Hz) */
+  REAL8 fHigh,                                  /**< End frequency; 0 defaults to Mf=0.14 */
+  REAL8 fRef,                                   /**< Reference frequency (Hz); 0 defaults to fLow */
+  REAL8 distance,                               /**< Distance of source (m) */
+  REAL8 inclination,                            /**< Inclination of source (rad) */
+  REAL8 mBH_SI,                                 /**< Mass of black hole (kg) */
+  REAL8 mNS_SI,                                 /**< Mass of neutron star (kg) */
+  REAL8 chi_BH,                                 /**< Dimensionless aligned component spin of the BH */
+  REAL8 Lambda                                  /**< Dimensionless tidal deformability (Eq 1  of Lackey et al) */
+) {
+  // Use fLow, fHigh, deltaF to compute freqs sequence
+  // Instead of building a full sequence we only transfer the boundaries and let
+  // the internal core function do the rest (and properly take care of corner cases).
+  REAL8Sequence *freqs = XLALCreateREAL8Sequence(2);
+  freqs->data[0] = fLow;
+  freqs->data[1] = fHigh;
+
+  int retcode = LackeyTidal2013SEOBNRv2ROMCore(hptilde, hctilde,
+            phiRef, fRef, distance, inclination, mBH_SI, mNS_SI, chi_BH, Lambda, freqs, deltaF);
+
+  XLALDestroyREAL8Sequence(freqs);
+
+  return(retcode);
+}
+
+/** @} */
+/** @} */
+
diff --git a/lalsimulation/src/LALSimIMRLackeyTidal2013.h b/lalsimulation/src/LALSimIMRLackeyTidal2013.h
new file mode 100644
index 0000000..b4c4994
--- /dev/null
+++ b/lalsimulation/src/LALSimIMRLackeyTidal2013.h
@@ -0,0 +1,67 @@
+#ifndef _LALSIM_IMR_LACKEY_TIDAL_2013_H
+#define _LALSIM_IMR_LACKEY_TIDAL_2013_H
+
+static void tidalPNAmplitudeCoefficient(
+  double *C,
+  const double eta,
+  const double chi_BH,
+  const double Lambda
+);
+
+static double tidalCorrectionAmplitude(
+  const double mf,
+  const double C,
+  const double eta,
+  const double Lambda
+);
+
+// precompute a0, a1 and G which do not depend on frequency
+static void tidalPNPhaseCoefficients(
+  double *a0,
+  double *a1,
+  double *G,
+  const double eta,
+  const double chi_BH,
+  const double Lambda
+);
+
+static double tidalPNPhase(
+  const double mf,
+  const double a0,
+  const double a1,
+  const double eta
+);
+
+static double tidalPNPhaseDeriv(
+  const double mf,
+  const double a0,
+  const double a1,
+  const double eta
+);
+
+// Implements Eq. 34 of Lackey et al
+static double tidalCorrectionPhase(
+  const double mf,
+  const double a0,
+  const double a1,
+  const double G,
+  const double eta,
+  const double Lambda
+);
+
+int LackeyTidal2013SEOBNRv2ROMCore(
+  struct tagCOMPLEX16FrequencySeries **hptilde, /**< Output: Frequency-domain waveform h+ */
+  struct tagCOMPLEX16FrequencySeries **hctilde, /**< Output: Frequency-domain waveform hx */
+  REAL8 phiRef,                                 /**< Phase at reference time */
+  REAL8 fRef,                                   /**< Reference frequency (Hz); 0 defaults to fLow */
+  REAL8 distance,                               /**< Distance of source (m) */
+  REAL8 inclination,                            /**< Inclination of source (rad) */
+  REAL8 mBH_SI,                                 /**< Mass of black hole (kg) */
+  REAL8 mNS_SI,                                 /**< Mass of neutron star (kg) */
+  REAL8 chi_BH,                                 /**< Dimensionless aligned component spin of the BH */
+  REAL8 Lambda,                                 /**< Dimensionless tidal deformability (Eq 1  of Lackey et al) */
+  const REAL8Sequence *freqs,                   /**< Frequency points at which to evaluate the waveform (Hz) */
+  REAL8 deltaF                                  /**< Sampling frequency (Hz) */
+);
+
+#endif /* _LALSIM_IMR_LACKEY_TIDAL_2013_H */
\ No newline at end of file
diff --git a/lalsimulation/src/LALSimIMRSEOBNRv2ROMDoubleSpinHI.c b/lalsimulation/src/LALSimIMRSEOBNRv2ROMDoubleSpinHI.c
index 4ffa88d..c92d831 100644
--- a/lalsimulation/src/LALSimIMRSEOBNRv2ROMDoubleSpinHI.c
+++ b/lalsimulation/src/LALSimIMRSEOBNRv2ROMDoubleSpinHI.c
@@ -1359,7 +1359,7 @@ static int SEOBNRv2ROMDoubleSpinCore(
 
   REAL8 s = 0.5; // Scale polarization amplitude so that strain agrees with FFT of SEOBNRv2
   double Mtot = Mtot_sec / LAL_MTSUN_SI;
-  double amp0 = Mtot * Mtot_sec * LAL_MRSUN_SI / (distance); // Correct overall amplitude to undo mass-dependent scaling used in ROM
+  double amp0 = Mtot * Mtot_sec * LAL_MRSUN_SI / distance; // Correct overall amplitude to undo mass-dependent scaling used in ROM
 
   // Evaluate reference phase for setting phiRef correctly
   double phase_change = gsl_spline_eval(spline_phi, fRef_geom, acc_phi) - 2*phiRef;
@@ -1431,12 +1431,12 @@ static int SEOBNRv2ROMDoubleSpinCore(
  *
  * \brief C code for SEOBNRv2 reduced order model
  * (double spin high resolution low mass version).
- * See CQG 31 195010, 2014, arXiv:1402.4146 for details.
- * Further details in M. Puerrer, https://dcc.ligo.org/P1500175.
+ * See M. Pürrer, CQG 31 195010, 2014, arXiv:1402.4146 for details.
+ * Further details in M. Pürrer, arXiv:1512.02248.
  *
  * This is a frequency domain model that approximates the time domain SEOBNRv2 model.
  *
- * The binary data HDF5 file (SEOBNRv2ROM_DS_HI_vXYZ.hdf5) and the gsl-binary data files (SEOBNRv2ROM_DS_HI_vXYZ.tar)
+ * The binary data HDF5 file (SEOBNRv2ROM_DS_HI_v1.0.hdf5) and the gsl-binary data files (SEOBNRv2ROM_DS_HI_v1.0.tar)
  * will be available at on LIGO clusters in /home/cbc/.
  * Make sure the files are in your LAL_DATA_PATH.
  *
@@ -1446,7 +1446,7 @@ static int SEOBNRv2ROMDoubleSpinCore(
  * @note Parameter ranges:
  *   * 0.01 <= eta <= 0.25
  *   * -1 <= chi_i <= 0.99
- *   * Mtot >= 3 Msun
+ *   * Mtot >= 2 Msun @ 10 Hz.
  *
  *  Aligned component spins chi1, chi2.
  *  Symmetric mass-ratio eta = m1*m2/(m1+m2)^2.
@@ -1485,7 +1485,7 @@ int XLALSimIMRSEOBNRv2ROMDoubleSpinHIFrequencySequence(
   REAL8 m2SI,                                   /**< Mass of companion 2 (kg) */
   REAL8 chi1,                                   /**< Dimensionless aligned component spin 1 */
   REAL8 chi2,                                   /**< Dimensionless aligned component spin 2 */
-  UINT4 nk_max)                                 /**< Truncate interpolants at SVD mode nk_max; don't truncate if nk_max == -1 */
+  INT4 nk_max)                                  /**< Truncate interpolants at SVD mode nk_max; don't truncate if nk_max == -1 */
 {
   /* Internally we need m1 > m2, so change around if this is not the case */
   if (m1SI < m2SI) {
@@ -1518,7 +1518,7 @@ int XLALSimIMRSEOBNRv2ROMDoubleSpinHIFrequencySequence(
 
   // Call the internal core function with deltaF = 0 to indicate that freqs is non-uniformly
   // spaced and we want the strain only at these frequencies
-  int retcode = SEOBNRv2ROMDoubleSpinCore(hptilde,hctilde,
+  int retcode = SEOBNRv2ROMDoubleSpinCore(hptilde, hctilde,
             phiRef, fRef, distance, inclination, Mtot_sec, eta, chi1, chi2, freqs, 0, nk_max);
 
   return(retcode);
@@ -1545,7 +1545,7 @@ int XLALSimIMRSEOBNRv2ROMDoubleSpinHI(
   REAL8 m2SI,                                   /**< Mass of companion 2 (kg) */
   REAL8 chi1,                                   /**< Dimensionless aligned component spin 1 */
   REAL8 chi2,                                   /**< Dimensionless aligned component spin 2 */
-  UINT4 nk_max)                                 /**< Truncate interpolants at SVD mode nk_max; don't truncate if nk_max == -1 */
+  INT4 nk_max)                                  /**< Truncate interpolants at SVD mode nk_max; don't truncate if nk_max == -1 */
 {
   /* Internally we need m1 > m2, so change around if this is not the case */
   if (m1SI < m2SI) {
@@ -1576,13 +1576,13 @@ int XLALSimIMRSEOBNRv2ROMDoubleSpinHI(
 #endif
 
   // Use fLow, fHigh, deltaF to compute freqs sequence
-  // Instead of building a full sequency we only transfer the boundaries and let
+  // Instead of building a full sequence we only transfer the boundaries and let
   // the internal core function do the rest (and properly take care of corner cases).
   REAL8Sequence *freqs = XLALCreateREAL8Sequence(2);
   freqs->data[0] = fLow;
   freqs->data[1] = fHigh;
 
-  int retcode = SEOBNRv2ROMDoubleSpinCore(hptilde,hctilde,
+  int retcode = SEOBNRv2ROMDoubleSpinCore(hptilde, hctilde,
             phiRef, fRef, distance, inclination, Mtot_sec, eta, chi1, chi2, freqs, deltaF, nk_max);
 
   XLALDestroyREAL8Sequence(freqs);
diff --git a/lalsimulation/src/LALSimInspiral.c b/lalsimulation/src/LALSimInspiral.c
index b57096b..981c7d0 100644
--- a/lalsimulation/src/LALSimInspiral.c
+++ b/lalsimulation/src/LALSimInspiral.c
@@ -127,6 +127,7 @@ static const char *lalSimulationApproximantNames[] = {
     INITIALIZE_NAME(SEOBNRv2_ROM_EffectiveSpin),
     INITIALIZE_NAME(SEOBNRv2_ROM_DoubleSpin),
     INITIALIZE_NAME(SEOBNRv2_ROM_DoubleSpin_HI),
+    INITIALIZE_NAME(Lackey_Tidal_2013_SEOBNRv2_ROM),
     INITIALIZE_NAME(HGimri),
     INITIALIZE_NAME(IMRPhenomA),
     INITIALIZE_NAME(IMRPhenomB),
@@ -1252,6 +1253,16 @@ int XLALSimInspiralChooseFDWaveform(
                     phiRef, deltaF, f_min, f_max, f_ref, r, i, m1, m2, S1z, S2z, -1);
             break;
 
+        case Lackey_Tidal_2013_SEOBNRv2_ROM:
+            /* Waveform-specific sanity checks */
+            if( !XLALSimInspiralWaveformFlagsIsDefault(waveFlags) )
+                ABORT_NONDEFAULT_WAVEFORM_FLAGS(waveFlags);
+            if( !checkTransverseSpinsZero(S1x, S1y, S2x, S2y) )
+                ABORT_NONZERO_TRANSVERSE_SPINS(waveFlags);
+
+            ret = XLALSimIMRLackeyTidal2013(hptilde, hctilde,
+                    phiRef, deltaF, f_min, f_max, f_ref, r, i, m1, m2, S1z, lambda2);
+            break;
 
         case IMRPhenomP:
             /* Waveform-specific sanity checks */
@@ -3939,6 +3950,7 @@ int XLALSimInspiralImplementedFDApproximants(
         case SEOBNRv2_ROM_EffectiveSpin:
         case SEOBNRv2_ROM_DoubleSpin:
         case SEOBNRv2_ROM_DoubleSpin_HI:
+        case Lackey_Tidal_2013_SEOBNRv2_ROM:
         //case TaylorR2F4:
         case TaylorF2:
 	case EccentricFD:
@@ -4354,6 +4366,7 @@ int XLALSimInspiralGetSpinSupportFromApproximant(Approximant approx){
     case SEOBNRv2_ROM_EffectiveSpin:
     case SEOBNRv2_ROM_DoubleSpin:
     case SEOBNRv2_ROM_DoubleSpin_HI:
+    case Lackey_Tidal_2013_SEOBNRv2_ROM:
     case TaylorR2F4:
     case IMRPhenomFB:
     case FindChirpSP:
@@ -4434,6 +4447,7 @@ int XLALSimInspiralApproximantAcceptTestGRParams(Approximant approx){
     case SEOBNRv2_ROM_EffectiveSpin:
     case SEOBNRv2_ROM_DoubleSpin:
     case SEOBNRv2_ROM_DoubleSpin_HI:
+    case Lackey_Tidal_2013_SEOBNRv2_ROM:
     case IMRPhenomA:
     case IMRPhenomB:
     case IMRPhenomFA:
diff --git a/lalsimulation/src/LALSimInspiral.h b/lalsimulation/src/LALSimInspiral.h
index a3fdac8..6c0e866 100644
--- a/lalsimulation/src/LALSimInspiral.h
+++ b/lalsimulation/src/LALSimInspiral.h
@@ -323,6 +323,8 @@ typedef enum {
                              * @remarks Implemented in lalsimulation (frequency domain). */
    SEOBNRv2_ROM_DoubleSpin_HI, /**< High resolution low-mass double-spin frequency domain reduced order model of spin-aligned EOBNR model SEOBNRv2
                                 * @remarks Implemented in lalsimulation (frequency domain). */
+   Lackey_Tidal_2013_SEOBNRv2_ROM, /**< Frequency domain tidal model based on reduced order model of SEOBNRv2
+                                * @remarks Implemented in lalsimulation (frequency domain). */
    HGimri,		/**< Time domain inspiral-merger-ringdown waveform for quasi-circular intermediate mass-ratio inspirals [Huerta & Gair arXiv:1009.1985]
                          * @remarks Implemented in lalsimulation (time domain). */
    IMRPhenomA,		/**< Time domain (non-spinning) inspiral-merger-ringdown waveforms generated from the inverse FFT of IMRPhenomFA.
diff --git a/lalsimulation/src/LALSimInspiralWaveformCache.c b/lalsimulation/src/LALSimInspiralWaveformCache.c
index 7fda90f..a3d8d36 100644
--- a/lalsimulation/src/LALSimInspiralWaveformCache.c
+++ b/lalsimulation/src/LALSimInspiralWaveformCache.c
@@ -1086,6 +1086,17 @@ int XLALSimInspiralChooseFDWaveformSequence(
                     phiRef, f_ref, r, i, m1, m2, S1z, S2z, -1);
             break;
 
+        case Lackey_Tidal_2013_SEOBNRv2_ROM:
+            /* Waveform-specific sanity checks */
+            if( !XLALSimInspiralWaveformFlagsIsDefault(waveFlags) )
+                ABORT_NONDEFAULT_WAVEFORM_FLAGS(waveFlags);
+            if( !checkTransverseSpinsZero(S1x, S1y, S2x, S2y) )
+                ABORT_NONZERO_TRANSVERSE_SPINS(waveFlags);
+
+            ret = XLALSimIMRLackeyTidal2013FrequencySequence(hptilde, hctilde, frequencies,
+                    phiRef, f_ref, r, i, m1, m2, S1z, lambda2);
+            break;
+
         case IMRPhenomP:
             spin1[0]=S1x; spin1[1]=S1y; spin1[2]=S1z;
             spin2[0]=S2x; spin2[1]=S2y; spin2[2]=S2z;
diff --git a/lalsimulation/src/Makefile.am b/lalsimulation/src/Makefile.am
index a0eaef2..9935ad3 100644
--- a/lalsimulation/src/Makefile.am
+++ b/lalsimulation/src/Makefile.am
@@ -100,6 +100,7 @@ noinst_HEADERS = \
 	LALSimIMRSpinAlignedEOBHcapDerivativeOptimized.c \
 	LALSimIMRSpinEOB.h \
 	LALSimIMRSpinEOBAuxFuncs.c \
+	LALSimIMRLackeyTidal2013.h \
 	LALSimIMRSpinEOBAuxFuncsPrec.c \
 	LALSimIMRSpinEOBComputeAmpPhasefromEOMSoln.c \
 	LALSimIMRSpinEOBFactorizedFlux.c \
@@ -136,6 +137,7 @@ liblalsimulation_la_SOURCES = \
 	LALSimIMRSEOBNRv2ROMDoubleSpinHI.c \
 	LALSimIMRSEOBNRv2ChirpTime.c \
 	LALSimIMREOBNRv2HMROM.c \
+	LALSimIMRLackeyTidal2013.c \
 	LALSimIMRPhenom.c \
 	LALSimIMRPhenomC.c \
 	LALSimIMRPhenomD.c \
-- 
2.5.4 (Apple Git-61)

